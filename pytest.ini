[pytest]
# Pytest configuration for EvalSync

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 7.0

# Command line options
addopts = 
    -ra
    --strict-markers
    --strict-config
    --cov=src
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --html=reports/pytest_report.html
    --self-contained-html
    --tb=short
    --maxfail=10
    -v

# Custom markers
markers =
    integration: Integration tests for API endpoints
    fuzzing: Fuzzing and security tests
    performance: Performance and load tests
    unit: Unit tests for individual components
    slow: Tests that take > 5 seconds
    requires_api: Tests that require external API access
    security: Security-focused tests
    smoke: Quick smoke tests
    regression: Regression test suite
    critical: Critical tests that must pass
    high_priority: High priority tests
    medium_priority: Medium priority tests
    low_priority: Low priority tests
    rag: RAG-specific tests
    schema: Schema validation tests
    error_handling: Error handling tests
    asyncio: Tests with async operations

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning

# Timeout
timeout = 300
timeout_method = thread

# Coverage settings
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*.py
    */__init__.py
    */setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod